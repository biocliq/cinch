apply from: 'deps.gradle'
 
allprojects {    
    version = '0.1_alpha'
}

  
allprojects {
   gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
		  options.debug = project.hasProperty('dev')
      }
   }
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'maven'
	
	group = 'com.zitlab.cinch'
	
    repositories {
        mavenLocal()
        maven {
            url = 'https://repo.maven.apache.org/maven2'
        }
    }
    
    dependencies {
	    implementation deps.apache.log4j2.slf4j
	    testImplementation group: 'org.testng', name: 'testng', version: '7.0.0'
    }
	
    sourceCompatibility = '1.8'    
    
	test {
	    useTestNG {
	        preserveOrder true
	    }
	}
	
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	javadoc.failOnError = false
	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
	}
		
	artifacts {
	    archives sourcesJar
	   // archives javadocJar
	}
}

project(":cinch-base"){    
}

project(":cinch-dao"){
	dependencies {
		implementation project(":cinch-base")
		implementation project(":cinch-dialect")		
		}    
}

project(":cinch-schema"){
	dependencies {
		implementation project(":cinch-base")
		implementation project(":cinch-dialect")
		implementation project(":cinch-dbmd")
		}    
}

project(":cinch-dialect"){
    
}

project ("cinch-examples"){
    dependencies {
    	implementation project(":cinch-orm")
    	implementation project(":cinch-core")
    }
}

project(":cinch-core"){
    dependencies {
    	api project(":cinch-dbmd")
    	api project(":cinch-base")
    	api project(":cinch-dao")
    	api project(":cinch-dialect")
    	api project(":cinch-schema")
    }
}

project(":cinch-orm"){
    dependencies {
		implementation project(":cinch-core")
    }
}

project(":cinch-dbmd"){
    dependencies {
    	
    }
}

configurations.all {
    resolutionStrategy {
        force 'xml-apis:xml-apis:1.0.b2'
    }
}
